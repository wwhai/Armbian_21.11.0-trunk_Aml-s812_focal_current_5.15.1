From 22807a32d1d57ae823cdb58d5965cb46de9b09da Mon Sep 17 00:00:00 2001
From: Alex Bee <knaerzche@gmail.com>
Date: Tue, 17 Nov 2020 21:02:11 +0100
Subject: [PATCH] rockchip: rk3188: override QoS params

Signed-off-by: Alex Bee <knaerzche@gmail.com>
---
 .../include/asm/arch-rockchip/qos_rk3188.h    | 33 +++++++++++++++++++
 arch/arm/mach-rockchip/rk3188/rk3188.c        | 11 +++++++
 2 files changed, 44 insertions(+)
 create mode 100644 arch/arm/include/asm/arch-rockchip/qos_rk3188.h

diff --git a/arch/arm/include/asm/arch-rockchip/qos_rk3188.h b/arch/arm/include/asm/arch-rockchip/qos_rk3188.h
new file mode 100644
index 0000000000..28f6c844bc
--- /dev/null
+++ b/arch/arm/include/asm/arch-rockchip/qos_rk3188.h
@@ -0,0 +1,33 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright 2016 Rockchip Inc.
+ */
+#ifndef _ASM_ARCH_QOS_RK3188_H
+#define _ASM_ARCH_QOS_RK3188_H
+
+#define CPU_AXI_BUS_BASE	0x10128000
+#define CPU_AXI_QOS_PRIORITY		0x08
+#define CPU_AXI_QOS_MODE		0x0c
+#define CPU_AXI_QOS_BANDWIDTH		0x10
+#define CPU_AXI_QOS_SATURATION	0x14
+
+#define CPU_AXI_DMAC_QOS_BASE           (CPU_AXI_BUS_BASE + 0x1000)
+#define CPU_AXI_CPU0_QOS_BASE           (CPU_AXI_BUS_BASE + 0x2000)
+#define CPU_AXI_CPU1R_QOS_BASE          (CPU_AXI_BUS_BASE + 0x2080)
+#define CPU_AXI_CPU1W_QOS_BASE          (CPU_AXI_BUS_BASE + 0x2100)
+#define CPU_AXI_PERI_QOS_BASE           (CPU_AXI_BUS_BASE + 0x4000)
+#define CPU_AXI_GPU_QOS_BASE            (CPU_AXI_BUS_BASE + 0x5000)
+#define CPU_AXI_VPU_QOS_BASE            (CPU_AXI_BUS_BASE + 0x6000)
+#define CPU_AXI_LCDC0_QOS_BASE          (CPU_AXI_BUS_BASE + 0x7000)
+#define CPU_AXI_CIF0_QOS_BASE           (CPU_AXI_BUS_BASE + 0x7080)
+#define CPU_AXI_IPP_QOS_BASE            (CPU_AXI_BUS_BASE + 0x7100)
+#define CPU_AXI_LCDC1_QOS_BASE          (CPU_AXI_BUS_BASE + 0x7180)
+#define CPU_AXI_CIF1_QOS_BASE           (CPU_AXI_BUS_BASE + 0x7200)
+#define CPU_AXI_RGA_QOS_BASE            (CPU_AXI_BUS_BASE + 0x7280)
+
+#define CPU_AXI_QOS_PRIORITY_LEVEL(h, l)        (((h & 3) << 2) | (l & 3))
+#define CPU_AXI_SET_QOS_PRIORITY(h, l, NAME) \
+	writel_relaxed(CPU_AXI_QOS_PRIORITY_LEVEL(h, l), CPU_AXI_##NAME##_QOS_BASE + CPU_AXI_QOS_PRIORITY)
+
+
+#endif
diff --git a/arch/arm/mach-rockchip/rk3188/rk3188.c b/arch/arm/mach-rockchip/rk3188/rk3188.c
index 222953ab94..e44dd189a1 100644
--- a/arch/arm/mach-rockchip/rk3188/rk3188.c
+++ b/arch/arm/mach-rockchip/rk3188/rk3188.c
@@ -13,6 +13,7 @@
 #include <asm/arch-rockchip/bootrom.h>
 #include <asm/arch-rockchip/clock.h>
 #include <asm/arch-rockchip/grf_rk3188.h>
+#include <asm/arch-rockchip/qos_rk3188.h>
 #include <asm/arch-rockchip/hardware.h>
 #include <linux/err.h>
 
@@ -102,6 +103,16 @@ int rk_board_late_init(void)
 		     NOC_REMAP_MASK << NOC_REMAP_SHIFT,
 		     NOC_REMAP_MASK << NOC_REMAP_SHIFT);
 
+
+        CPU_AXI_SET_QOS_PRIORITY(0, 0, DMAC);
+        CPU_AXI_SET_QOS_PRIORITY(0, 0, CPU0);
+        CPU_AXI_SET_QOS_PRIORITY(0, 0, CPU1R);
+        CPU_AXI_SET_QOS_PRIORITY(0, 0, CPU1W);
+        CPU_AXI_SET_QOS_PRIORITY(2, 2, PERI);
+        CPU_AXI_SET_QOS_PRIORITY(3, 3, LCDC0);
+        CPU_AXI_SET_QOS_PRIORITY(3, 3, LCDC1);
+        CPU_AXI_SET_QOS_PRIORITY(2, 1, GPU);
+
 	return rk3188_board_late_init();
 }
 
